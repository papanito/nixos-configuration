{ config, pkgs, ... }:
{
  networking = {
    hostName = "envy"; # Define your hostname

    interfaces = {
      enp0s20f0u5.ipv4.addresses = [{
        address = "10.0.0.10";
        prefixLength = 16;
      }];
    };

    firewall = {
      allowedTCPPorts = [
        80
        443
        3003
        8096
      ];
      # checkReversePath = false;
      allowedUDPPorts = [
       53
      ];
    };

    nameservers = [
      "127.0.0.1:51"
      "::1:51"
      "2a06:98c1:54::3cfe:51"
    ];
  };

  environment.etc."resolv.conf".text = ''
    # Generated by environment.etc (NixOS static DNS fix)
    "10.0.0.1"
    #"127.0.0.1:51"
    #"::1:51"
    #"2a06:98c1:54::3cfe:51"
  '';

  boot.kernel.sysctl = {
    "net.ipv4.ip_forward" = 1;
    "net.ipv4.ip_unprivileged_port_start" = 0;
  };

  services.dnscrypt-proxy2 = {
    enable = true;
    settings = {
      listen_addresses = [
        "127.0.0.1:51"
        "[::1]:51"
      ];
    };
  };
  services.adguardhome = {
    enable = true;
    settings = {
      http = {
        # You can select any ip and port, just make sure to open firewalls where needed
        address = "127.0.0.1:3003";
      };
      dns = {
        upstream_dns = [
          # Example config with quad9
          "9.9.9.9" #dns.quad9.net"
          #"149.112.112.112#dns.quad9.net"
          # Uncomment the following to use a local DNS service (e.g. Unbound)
          # Additionally replace the address & port as needed
          #"plain://127.0.0.1:51"
          #"127.0.0.1:51"
        ];
        dnssec_enabled = false;
      };
      filtering = {
        protection_enabled = true;
        filtering_enabled = true;

        parental_enabled = false;  # Parental control-based DNS requests filtering.
        safe_search = {
          enabled = false;  # Enforcing "Safe search" option for search engines, when possible.
        };
      };
      # The following notation uses map
      # to not have to manually create {enabled = true; url = "";} for every filter
      # This is, however, fully optional
      filters = map(url: { enabled = true; url = url; }) [
        "https://adguardteam.github.io/HostlistsRegistry/assets/filter_9.txt"  # The Big List of Hacked Malware Web Sites
        "https://adguardteam.github.io/HostlistsRegistry/assets/filter_11.txt"  # malicious url blocklist
      ];
    };
  };
}
